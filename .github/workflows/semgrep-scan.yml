name: Semgrep Security Scan

on:
  workflow_call:
    inputs:
      scan-mode:
        description: 'Modo de scan: "diff" para PRs ou "full" para a branch principal.'
        required: true
        type: string
    secrets:
      SEMGREP_APP_TOKEN:
        description: 'Token de App do Semgrep'
        required: true

permissions:
  contents: write
  pull-requests: write
  security-events: write

jobs:
  semgrep-security-scan:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    if: (github.actor != 'dependabot[bot]')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Passo 2: Adicionamos um passo para instalar a ferramenta no runner
      - name: Install Semgrep
        run: pip install semgrep

      - name: Gather PR Information
        id: pr_info
        run: |
          REPO_FULL_NAME="${{ github.repository }}"
          echo "REPO_NAME=${REPO_FULL_NAME##*/}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date -u +"%Y-%m-%d")" >> $GITHUB_ENV
          echo "JSON_FILENAME=semgrep-${REPO_FULL_NAME##*/}-${{ github.event.pull_request.number }}-$(date -u +"%Y-%m-%d").json" >> $GITHUB_ENV

      - name: Run Semgrep on Changed Files
        if: ${{ inputs.scan-mode == 'diff'}}
        id: semgrep-diff
        run: |
          BASE_BRANCH="origin/${{ github.base_ref }}"
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR $BASE_BRANCH...HEAD)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "Nenhum arquivo para escanear."
            exit 0
          fi
          
          semgrep scan \
            --sarif-output semgrep.sarif \
            --json-output "$JSON_FILENAME" \
            --exclude 'node_modules/**,dist/**,build/**,*.min.js,*.bundle.js' \
            --timeout 1800 \
            --max-memory 4096 \
            $CHANGED_FILES
          echo $CHANGED_FILES

          # Verifica se o arquivo JSON foi criado e contém resultados
          if [ -f "$JSON_FILENAME" ] && [ $(jq '.results | length' "$JSON_FILENAME") -gt 0 ]; then
            echo "Vulnerabilidades encontradas. Formatando o comentário para o PR..."
            
            # Conta as vulnerabilidades com severidade alta
            HIGH_COUNT=$(jq '[.results[].extra | select(.severity == "ERROR")] | length' "$JSON_FILENAME")
            
            if [ "$HIGH_COUNT" -ge 1 ]; then
              SCAN_URL="${{ github.server_url }}/${{ github.repository }}/security/code-scanning?query=pr:${{ github.event.pull_request.number }}"
              
              COMMENT_BODY=$(jq -r --arg SCAN_URL "$SCAN_URL" '"### Alertas de Segurança do Semgrep\n\nEncontramos os seguintes problemas no seu Pull Request:\n\n---\n| Severidade | Regra | Arquivo | Linha |\n| :--- | :--- | :--- | :--- |\n" + ([.results[] | select(.extra.severity == "ERROR")] | map("| `\(.extra.severity)` | `\(.check_id)` | `\(.path)` | `\(.start.line)` |\n> **Mensagem:** \(.extra.message)") | join("\n---\n")) + "\n\n---\n\n[**Ver todos os detalhes no Code Scanning ↗**](\($SCAN_URL))"' "$JSON_FILENAME")
              echo "$COMMENT_BODY" | gh pr comment $PR_NUMBER --body-file -
              echo "Comentário postado no PR #$PR_NUMBER."
            fi
          else
            echo "Suas alterações estão **ben seguras**."
          fi
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Semgrep Full scan
        if: ${{ inputs.scan-mode == 'full'}}
        id: semgrep-full
        run: |
          semgrep scan \
            --sarif-output semgrep.sarif \
            --json-output "$JSON_FILENAME" \
            --exclude 'node_modules/**,dist/**,build/**,*.min.js,*.bundle.js' \
            --timeout 1800 \
            --max-memory 4096
        continue-on-error: true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Count, Display, and Check Vulnerabilities
        id: count_vulns
        run: |
          HIGH_COUNT=$(jq '[.results[].extra | select(.severity == "ERROR")] | length' "$JSON_FILENAME")
          MEDIUM_COUNT=$(jq '[.results[].extra | select(.severity == "WARNING")] | length' "$JSON_FILENAME")
          LOW_COUNT=$(jq '[.results[].extra | select(.severity == "INFO")] | length' "$JSON_FILENAME")
          echo "HIGH_COUNT=$HIGH_COUNT" >> $GITHUB_ENV
          echo "MEDIUM_COUNT=$MEDIUM_COUNT" >> $GITHUB_ENV
          echo "LOW_COUNT=$LOW_COUNT" >> $GITHUB_ENV
          echo "Repository: $REPO_NAME"
          echo "PR Number: $PR_NUMBER"
          echo "Scan Timestamp: $TIMESTAMP"
          echo "Vulnerabilidades Altas: $HIGH_COUNT"
          echo "Vulnerabilidades Médias: $MEDIUM_COUNT"
          echo "Vulnerabilidades Baixas: $LOW_COUNT"

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Upload Json as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.JSON_FILENAME }}"
          path: "${{ env.JSON_FILENAME }}"
          retention-days: 30

      - name: Pipeline break
        if: ${{ inputs.scan-mode == 'diff' }}
        id: pipeline_break
        run: |
          if [ "$HIGH_COUNT" -ge 1 ]; then
            echo "::error::Foram identificadas vulnerabilidades com severidade alta."
          fi