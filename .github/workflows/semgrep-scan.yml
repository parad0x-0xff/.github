name: Semgrep Security Scan

# 'workflow_call' permite que este workflow seja chamado por outros.
on:
  workflow_call:
    inputs:
      semgrep-rules:
        description: 'An√°lise est√°tica de c√≥digo com Semgrep'
        required: false
        type: string
        default: 'p/ci'
      fail-on-findings:
        description: 'Falhar a pipeline'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  semgrep:
    name: semgrep-oss/scan
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Timeout para evitar travamentos
    
    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')
    
    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep
    
    steps:
      # Fetch project source with GitHub Actions Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Para an√°lise completa do hist√≥rico

      # Run the "semgrep scan" command on the command line of the docker image
      - name: Run Semgrep scan
        id: semgrep
        run: |
          semgrep scan \
            --sarif \
            --sarif-output semgrep.sarif \
            --exclude 'node_modules/**,dist/**,build/**,*.min.js,*.bundle.js' \
            --severity ERROR \
            --baseline-commit ${{ github.event.before }} \
            --timeout 1800 \
            --max-memory 4096
            --metrics=off


      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-${{ github.event_name }}-${{ github.sha }}
        if: always()

      - name: Generate Security Report
        id: report
        run: |
          if [ -f "semgrep.sarif" ]; then
            echo "## üîç Semgrep Security Scan Results" >> $GITHUB_STEP_SUMMARY
            
            # Contar vulnerabilidades por severidade usando a estrutura correta do SARIF
            ERROR_COUNT=$(jq -r '.runs[0].results[] | select(.properties.severity == "ERROR" or .properties.severity == "error" or .properties.severity == "CRITICAL" or .properties.severity == "critical") | .ruleId' semgrep.sarif 2>/dev/null | wc -l || echo "0")
            WARNING_COUNT=$(jq -r '.runs[0].results[] | select(.properties.severity == "WARNING" or .properties.severity == "warning" or .properties.severity == "MEDIUM" or .properties.severity == "medium") | .ruleId' semgrep.sarif 2>/dev/null | wc -l || echo "0")
            INFO_COUNT=$(jq -r '.runs[0].results[] | select(.properties.severity == "INFO" or .properties.severity == "info" or .properties.severity == "LOW" or .properties.severity == "low") | .ruleId' semgrep.sarif 2>/dev/null | wc -l || echo "0")
            
            # Se n√£o encontrar severidade em properties, tentar contar todos os resultados
            if [ "$ERROR_COUNT" = "0" ] && [ "$WARNING_COUNT" = "0" ] && [ "$INFO_COUNT" = "0" ]; then
              TOTAL_RESULTS=$(jq -r '.runs[0].results | length' semgrep.sarif 2>/dev/null || echo "0")
              echo "### üìä Summary" >> $GITHUB_STEP_SUMMARY
              echo "- **Total Findings**: $TOTAL_RESULTS" >> $GITHUB_STEP_SUMMARY
              echo "- **Note**: Severity levels not available in SARIF output" >> $GITHUB_STEP_SUMMARY
              
              # Listar top 5 vulnerabilidades encontradas
              echo "### üö® Top Findings" >> $GITHUB_STEP_SUMMARY
              jq -r '.runs[0].results[] | "- **" + .ruleId + "**: " + .message.text' semgrep.sarif 2>/dev/null | head -5 >> $GITHUB_STEP_SUMMARY || echo "- No findings" >> $GITHUB_STEP_SUMMARY
              
              # Salvar contadores para uso posterior
              echo "error_count=$TOTAL_RESULTS" >> $GITHUB_OUTPUT
              echo "warning_count=0" >> $GITHUB_OUTPUT
              echo "info_count=0" >> $GITHUB_OUTPUT
            else
              echo "### üìä Summary" >> $GITHUB_STEP_SUMMARY
              echo "- **Critical/High**: $ERROR_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- **Medium**: $WARNING_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- **Low/Info**: $INFO_COUNT" >> $GITHUB_STEP_SUMMARY
              
              # Listar top 5 vulnerabilidades mais cr√≠ticas
              echo "### üö® Top Critical Findings" >> $GITHUB_STEP_SUMMARY
              jq -r '.runs[0].results[] | select(.properties.severity == "ERROR" or .properties.severity == "error" or .properties.severity == "CRITICAL" or .properties.severity == "critical") | "- **" + .ruleId + "**: " + .message.text' semgrep.sarif 2>/dev/null | head -5 >> $GITHUB_STEP_SUMMARY || echo "- No critical findings" >> $GITHUB_STEP_SUMMARY
              
              # Salvar contadores para uso posterior
              echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
              echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
              echo "info_count=$INFO_COUNT" >> $GITHUB_OUTPUT
            fi
            
            # Adicionar informa√ß√µes sobre arquivos analisados
            echo "### üìÅ Files Analyzed" >> $GITHUB_STEP_SUMMARY
            jq -r '.runs[0].results[] | .locations[0].physicalLocation.artifactLocation.uri' semgrep.sarif 2>/dev/null | sort | uniq | head -10 >> $GITHUB_STEP_SUMMARY || echo "- No file information available" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "## ‚ö†Ô∏è No SARIF file found" >> $GITHUB_STEP_SUMMARY
            echo "error_count=0" >> $GITHUB_OUTPUT
            echo "warning_count=0" >> $GITHUB_OUTPUT
            echo "info_count=0" >> $GITHUB_OUTPUT
          fi
        if: always()

      - name: Fail on Critical Findings (Optional)
        if: inputs.fail-on-findings == 'true' && (steps.report.outputs.error_count != '0' || steps.report.outputs.warning_count != '0')
        run: |
          echo "‚ùå Security findings detected! Pipeline will fail."
          echo "Found ${{ steps.report.outputs.error_count }} critical/high severity issues."
          echo "Found ${{ steps.report.outputs.warning_count }} medium severity issues."
          echo "Found ${{ steps.report.outputs.info_count }} low/info severity issues."
          exit 1

      - name: Success Message
        if: steps.report.outputs.error_count == '0' && steps.report.outputs.warning_count == '0' && steps.report.outputs.info_count == '0'
        run: |
          echo "‚úÖ No security issues found! Code is secure."
          
      - name: Partial Success Message
        if: (steps.report.outputs.error_count == '0' && steps.report.outputs.warning_count == '0' && steps.report.outputs.info_count != '0') || (steps.report.outputs.error_count == '0' && steps.report.outputs.warning_count != '0')
        run: |
          echo "‚ö†Ô∏è Security scan completed with findings:"
          echo "- Critical/High: ${{ steps.report.outputs.error_count }}"
          echo "- Medium: ${{ steps.report.outputs.warning_count }}"
          echo "- Low/Info: ${{ steps.report.outputs.info_count }}"
          echo "Pipeline continues as fail-on-findings is set to false." 